package main

import (
	"crypto/sha256"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/joho/godotenv"
)

const stats_path = "luh_stats.txt"
const klausuren_url = "https://www.et-inf.uni-hannover.de/fileadmin/et-inf/Dateien-Studium/Studiengaenge_Informatik/Klausuren_Inf_TI.pdf"
const modkat_url = "https://modkat.dbs.uni-hannover.de/modkat/materialien/modkat_bsc_infpo17.pdf"

func send(message string, chat_id string, api_key string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	params := url.Values{}
	params.Add("chat_id", chat_id)
	params.Add("text", message)
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", "https://api.telegram.org/bot"+api_key+"/sendMessage", body)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
}

// Returns SHA256 checksum of the url file
func getHashFromURL(url string) string {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal("Error downloading file:", url)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("Error io.ReadAll(resp.Body")
	}
	return fmt.Sprintf("%x", sha256.Sum256(body))
}

func main() {
	// Load variables from the .env file
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
	chat_id := os.Getenv("CHAT_ID")
	api_key := os.Getenv("API_KEY")

	// Create output file if not exists
	_, err = os.OpenFile(stats_path, os.O_RDONLY|os.O_CREATE, 0644)
	if err != nil {
		panic(err)
	}
	file, err := os.ReadFile(stats_path)
	if err != nil {
		panic(err)
	}

	klausuren_hash := getHashFromURL(klausuren_url)
	modkat_hash := getHashFromURL(modkat_url)

	out := klausuren_hash + "\n" + modkat_hash
	s := strings.Split(string(file), "\n")
	var updates string = ""

	if len(string(file)) == 0 {
		goto FINISH
	}
	if s[0] != klausuren_hash {
		updates += "Klausurenplan Update!\n"
	}
	if s[1] != modkat_hash {
		updates += "ModKat Update!"
	}
	if len(updates) != 0 {
		send(updates, chat_id, api_key)
	}
FINISH:
	err = os.WriteFile(stats_path, []byte(out), 0644)
	if err != nil {
		panic(err)
	}
}
